---
import { useTranslations } from '../i18n/util';
export interface Props {
	type?: 'note' | 'tip' | 'caution' | 'danger';
	title?: string;
}

const t = useTranslations(Astro);
const { type = 'note', title = t(`aside.${type}`) } = Astro.props as Props;

// SVG icon paths based on GitHub Octicons
const icons: Record<NonNullable<Props['type']>, { viewBox: string; d: string }> = {
	note: {
		viewBox: '0 0 18 18',
		d: 'M0 3.75C0 2.784.784 2 1.75 2h12.5c.966 0 1.75.784 1.75 1.75v8.5A1.75 1.75 0 0114.25 14H1.75A1.75 1.75 0 010 12.25v-8.5zm1.75-.25a.25.25 0 00-.25.25v8.5c0 .138.112.25.25.25h12.5a.25.25 0 00.25-.25v-8.5a.25.25 0 00-.25-.25H1.75zM3.5 6.25a.75.75 0 01.75-.75h7a.75.75 0 010 1.5h-7a.75.75 0 01-.75-.75zm.75 2.25a.75.75 0 000 1.5h4a.75.75 0 000-1.5h-4z',
	},
	tip: {
		viewBox: '0 0 18 18',
		d: 'M2 6a6 6 0 1 1 10.174 4.31c-.203.196-.359.4-.453.619l-.762 1.769A.5.5 0 0 1 10.5 13a.5.5 0 0 1 0 1 .5.5 0 0 1 0 1l-.224.447a1 1 0 0 1-.894.553H6.618a1 1 0 0 1-.894-.553L5.5 15a.5.5 0 0 1 0-1 .5.5 0 0 1 0-1 .5.5 0 0 1-.46-.302l-.761-1.77a1.964 1.964 0 0 0-.453-.618A5.984 5.984 0 0 1 2 6zm6-5a5 5 0 0 0-3.479 8.592c.263.254.514.564.676.941L5.83 12h4.342l.632-1.467c.162-.377.413-.687.676-.941A5 5 0 0 0 8 1z',
	},
	caution: {
		viewBox: '-1 1 18 18',
		d: 'M8.9 1.5C8.7 1.2 8.4 1 8 1s-.7.2-.9.5l-7 12a1 1 0 0 0 0 1c.2.3.6.5 1 .5H15c.4 0 .7-.2.9-.5a1 1 0 0 0 0-1l-7-12zM9 13H7v-2h2v2zm0-3H7V6h2v4z',
	},
	danger: {
		viewBox: '0 1 14 17',
		d: 'M5 .3c.9 2.2.5 3.4-.5 4.3C3.5 5.6 2 6.5 1 8c-1.5 2-1.7 6.5 3.5 7.7-2.2-1.2-2.6-4.5-.3-6.6-.6 2 .6 3.3 2 2.8 1.4-.4 2.3.6 2.2 1.7 0 .8-.3 1.4-1 1.8A5.6 5.6 0 0 0 12 10c0-2.9-2.5-3.3-1.3-5.7-1.5.2-2 1.2-1.8 2.8 0 1-1 1.8-2 1.3-.6-.4-.6-1.2 0-1.8C8.2 5.3 8.7 2.5 5 .3z',
	},
};

const { viewBox, d } = icons[type];
---

<aside class={`content ${type}`} aria-label={title}>
{type != 'note' && (<p class="title" aria-hidden="true">
		<span class="icon">
			<svg xmlns="http://www.w3.org/2000/svg" {viewBox} width={16} height={16}>
				<path fill-rule="evenodd" {d}></path>
			</svg>
		</span>
		{title}
	</p>
)}
	<section>
		<slot />
	</section>
</aside>

<style>
	aside {
		--aside-color-base: var(--theme-accent-full);
		--aside-color-lightness: 54%;
		--aside-accent-color: hsl(var(--aside-color-base), var(--aside-color-lightness));
		--aside-text-lightness: 20%;
		--aside-text-accent-color: hsl(var(--aside-color-base), var(--aside-text-lightness));	
		padding: 1rem;
		background-color: var(--theme-accent-opacity);
		/* Indicates the aside boundaries for forced colors users, transparent is changed to a solid color */
		outline: 1px solid transparent;
		border-radius: var(--theme-border-radius);
	}

	:global(.theme-dark) aside {
		--aside-text-lightness: 85%;
	}

	.title {
		line-height: 1;
		margin-bottom: 0.5rem;
		font-size: 0.9rem;
		letter-spacing: 0.05em;
		font-weight: bold;
		text-transform: uppercase;
	}

	.icon svg {
		width: 1.5em;
		height: 1.5em;
		vertical-align: middle;
		fill: currentcolor;
	}

	.title .icon{
		display: inline;
	}

	aside :global(a),
	aside :global(a > code:not([class*='language'])) {
		
	}

	aside :global(p),
	aside.content :global(ul) {
		color: var(--theme-text);
	}

	:global(.theme-dark) aside :global(code:not([class*='language'])) {
		color: var(--theme-code-text);
	}

	aside :global(pre) {
		margin-left: 0;
		margin-right: 0;
	}

	.tip {
		--aside-color-lightness: 42%;
		--aside-color-base: var(--theme-accent-full);
	}

	.caution {
		--aside-color-lightness: 39%;
		background: rgba(255, 191, 0, 0.46);
	}

	.danger {
		--aside-color-lightness: 54%;
		background: #b300005e;
	}
</style>
