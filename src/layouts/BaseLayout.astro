---
import Header from '../components/Header/Header.astro';
import HeadCommon from '../components/HeadCommon.astro';
import HeadSEO from '../components/HeadSEO.astro';
import LeftSidebar from '../components/LeftSidebar/LeftSidebar.astro';
import Footer from '../components/Footer/Footer.astro';
import { normalizeLangTag } from '../i18n/bcp-normalize';
import { rtlLanguages } from '../i18n/languages';
import { useTranslations } from '../i18n/util';
import { getLanguageFromURL } from '../util';
import HeadImports from './HeadImports.astro';

const { content = {} } = Astro.props;
const isFallback = !!Astro.params.fallback;
const url = new URL(Astro.request.url);
const lang = getLanguageFromURL(url.pathname);
const direction = rtlLanguages.has(lang) ? 'rtl' : 'ltr';
const bcpLang = normalizeLangTag(lang);
const currentPage = url.pathname;
const t = useTranslations(Astro);
const formatTitle = (content: { title?: string }) => {
	console.log(content.title, t('site.title'))
	if(content.title) {
		if(content.title == t('site.title')) {
			return t('site.title')
		}
		return `${content.title} - ${t('site.title')}` 
	} 
	return t('site.title');
}
// Ensures the canonicalURL always has a trailing slash.
const canonicalURL = new URL(Astro.url.pathname.replace(/([^/])$/, '$1/'), Astro.site);
if (isFallback) canonicalURL.pathname = canonicalURL.pathname.replace(`/${lang}/`, '/en/');
---

<html dir={direction} lang={bcpLang} class="initial">
	<head>
		<HeadCommon />
		<HeadSEO {content} {canonicalURL} site={Astro.site} />
		<title set:html={formatTitle(content)}></title>
		<!-- Following import contains openreplay Tracker, fonts used in Docs -->
		<HeadImports /> 
	</head>

	<body class={content.baseClass || ""}>
		<Header {currentPage} />
		
		{/* Mobile Overlay Sidebar */}
		<aside
			id="mobile-left-sidebar"
			class="lg:hidden fixed inset-y-0 left-0 w-10/12 bg-white overflow-y-auto transform -translate-x-full transition-transform duration-300 ease-in-out z-50"
		>
			<LeftSidebar {currentPage} />
		</aside>

		{/* Mobile Background Overlay */}
		<div
			id="mobile-overlay"
			class="lg:hidden fixed inset-0 bg-black bg-opacity-50 opacity-0 pointer-events-none transition-opacity duration-300 z-40"
			onclick="closeMobileMenu()"
		></div>
		
		<main class="layout max-w-screen-2xl h-screen lg:flex mx-auto justify-between pt-20">
			<aside id="left-sidebar" class="hidden lg:block w-3/12 p-4 pt-0 overflow-y-auto h-full">
				<LeftSidebar {currentPage} />
			</aside>
		
			<div class="flex-1 flex flex-col overflow-y-auto">
				<div class="flex-grow flex flex-col xl:flex-row w-full">
					<div id="main-content" class="p-6 pt-0 xl:w-9/12 min-w-0">
						<div class="max-w-3xl mx-auto xl:mx-0">
							<slot />
						</div>
					</div>
					<div id="right-sidebar" class="hidden xl:block xl:w-3/12 px-4 flex-shrink-0">
						<div class="xl:sticky xl:top-0">
							<slot name="secondary-sidebar" />
						</div>
					</div>
				</div>
				<div class="xl:ps-6 xl:pe-20"><Footer /></div>
			</div>
		</main>
		<script>
			// Declare the type for TypeScript
			declare global {
				interface Window {
					closeMobileMenu: () => void;
				}
			}
			
			window.closeMobileMenu = () => {
				document.body.classList.remove('mobile-sidebar-toggle');
				window.dispatchEvent(new CustomEvent('mobile-sidebar-closed'));
			};
		</script>
	</body>
</html>

<style>
	/* If the body has the class "mobile-sidebar-toggle", slide-in the mobile sidebar */
    body.mobile-sidebar-toggle #mobile-left-sidebar {
        @apply translate-x-0;
    }

    body.mobile-sidebar-toggle #mobile-overlay {
        @apply opacity-100 pointer-events-auto;
    }
</style>